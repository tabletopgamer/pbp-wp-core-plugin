<?php

use PbP_Core\Implementations\PbP_WP_Post_Entity_Repository;
/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-01-06 at 19:55:26.
 */
class PbP_WP_Post_Entity_Repository_Tests extends WP_UnitTestCase {

    /**
     * @var Entity
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public function setUp() {
        $this->object = new PbP_WP_Post_Entity_Repository();
        parent::setUp();
    }

    /**
     * @covers WpPostEntityRepository::getEntityById
     * @todo   Implement testGetContents().
     */
    public function testGetEntityById_WithExistingPostId_ReturnsThatPost() {
        $post_id = $this->factory->post->create( array(  
            'post_title' => 'Chapter 1, Scene 3'  ) );

        $result = $this->object->getEntityById( $post_id );
   
        $this->assertEquals( $post_id, $result->get_id() );
        $this->assertEquals( "Chapter 1, Scene 3", $result->get_title() );
    }
    
    
    /**
     * @covers WpPostEntityRepository::getEntityById
     * @todo   Implement testGetContents().
     */
    public function testGetEntityById_WithInExistingPostId_ReturnsNull() {
        $post_id = 1000;

        $result = $this->object->getEntityById( $post_id );
   
        $this->assertEquals( NULL, $result );
    }
    
    /**
     * @covers WpPostEntityRepository::getEntitiesByIds
     */
    public function testGetEntitiesById_WithOneEntityId_OfExistingPost_ReturnsListWithOnePost() {
        $post_id = $this->factory->post->create();
         
        $results = $this->object->getEntitiesById( [$post_id] );
        
        $this->assertEquals( 1, count( $results ) );
    }
    
    /**
     * @covers WpPostEntityRepository::getEntitiesByIds
     */
    public function testGetEntitiesById_WithOneEntityId_OfInexistingPost_ReturnsEmptyList() {
        $post_id = 1000;
         
        $results = $this->object->getEntitiesById( [$post_id] );
        
        $this->assertEquals( 0, count( $results ) );
    }
    
    
    /**
     * @covers WpPostEntityRepository::getEntitiesByIds
     */
    public function testGetEntitiesById_WithThreeEntityIds_OfExistingPosts_ReturnsEmptyList() {
        $post_id1 = 1001;
        $post_id2 = 1002;
         
        $results = $this->object->getEntitiesById( [$post_id1, $post_id2] );
        
        $this->assertEquals( 0, count( $results ) );
    }
}